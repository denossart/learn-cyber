

HASH FUNCTIONS


==DEFINITION
Maps an arbitrary string of data to a fixed length output (= 160 or 256 bits) in a deterministic (= every time the same hash), public, "random" (= pseudo-random) manner

> No secret key
> All operations are public
> Poly-time computation


==HASH COLLISION
When different input (= data in the hash table) produces the same output (= hash value)

More bits = higher hash collision resistance


==HASH ALGORITHMS

--MD4, MD5 ("Message Digest")

--SHA- Family ("Secure Hash Algorithm")

----SHA-1  = 160-bits = broken
----SHA-2 family: SHA-256 (blockchain), SHA-384, SHA-512 = highly secure
----SHA-3 family = standard now (MIT course of 2016!) = more secure than SHA-2 = highly secure and official recommended standard in US (using normal systems, not quantum machines)
(----BLAKE2, BLAKE2s, BLAKE2b
----RIPEMD-160)


==BITS
d = number of bits


==RANDOM ORACLE
Ideal = Random Oracle but not achievable in practice so we have to approximate it

==DESIRABLE PROPERTIES

-- ONE-WAYNESS (OW) (= aka pre-image resistance)
-- COLLISION RESISTANCE (CR)
-- TARGET COLLISION RESISTANCE (TCR) = weaker than CR
-- PSEUDO-RANDOM FUNCTION (PRF)
-- NON-MALLEABILITY (NM)


==APPLICATIONS

====APPLICATION 1 = PASSWORD STORAGE

128 bits = 16 characters = enough entropy

Don't store the password (pw) on the computer, store the hash (h) of the pw on your computer

Use h(pw) to compare aginst h(pw'), where pw' is the typed password

On typical systems OW is enough and TCR is not needed because the pw = 128 bits and a typical system locks you out after 10 or so tries

Disclosure of h(pw) should NOT reveal pw = what one-wayness means

TCR means that when someone enters a different password, the h(pw') = h(pw)


====APPLICATION 2 = FILE MODIFICATION DETECTOR

For each f, store the h(f)

A successful break = when an attacker modifies the file but the h(f) doesn't change 

So TCR is needed to verify the authenticity


====APPLICATION 3 = DIGITAL SIGNATURE

A document is signed using a private key and anybody can verify the signature using the public key

PKY = public key = on website
SKY = secret key = only for you

The assumption:
> the user keeps the SKA secret for himself at all times
> the PKA doesn't reveal anything on the SKA

Look at the KY as two different passwords but with a mathematical relationship between them

How it works:
> signing (sigma) = (SKA,M) using the SKA
> verification = (M, sigma, PKA) = TRUE/FALSE

When the message (M) is large, it's better to first hash the message h(M), because it's easier to sign h(M) than to sign M

Signing = (SKA, h(M)), so TCR of the h is needed

Because what is bad = when Alice signs h(M) but Bob claims that Alice signed M' because h(M) = h(M')

So this is TCR and not CR (= using a "salt")

Anything that is different breaks the scheme, it doesn't matter if the difference = 100.000$ or 20$


====APPLICATION 4 = COMMITMENTS

Keeping a legal promise

Alice has value X (= auction bid)

Alice computes C(X) and submits

Auctioneer/auctionees can see C(X) = the sealing of the bid aka the closed enveloppe

After biding: Alice opens the seal (= the C(X)) to reveal her X

To know of a bid in advance = an advantage and this cannot happen, so C(X) cannnot reveal X (= OW) but it is also needed that Alice is honest = CR because Alice should not be able to open the seal in multiple ways, so if 10.000$ and 1.000.000$ collide, so not malleable

C(X) = public to auctioneer/auctionees = enveloppe should not be possible to produce C(X+1)

Question: So if the bid = OW, TCR and NM is it ok?

No, because if h'(X) = h(X) || msb(X)

So for true secrecy a little bit more is needed



==SOURCES:

> youtube.com/watch?v=KqqOXndnvic (MIT OpenCourseWare, instructor: Srinivas Devadas)
> cryptobook.nakov.com/cryptographic-hash-functions/secure-hash-algorithms
